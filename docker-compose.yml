version: '3.8'

services:
  app:
    build: .  # Uses the enhanced Dockerfile
    image: eurostat-enhanced-processor # Updated image name
    container_name: eurostat_app_processor
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Enhanced pipeline database connection details
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=eurostat_data
      - POSTGRES_USER=eurostat_user
      - POSTGRES_PASSWORD=mysecretpassword
      - DBT_PROFILES_DIR=/app/dbt_project # For dbt integration
      # Enhanced pipeline configuration
      - USE_SHARED_MODULES=true
      - ENHANCED_PIPELINE_MODE=true
      - PYTHONUNBUFFERED=1 # For immediate log output
    volumes:
      # Mount directories for data persistence and enhanced pipeline output
      - ./Data_Directory:/app/Data_Directory
      - ./Output_Parquet_Directory:/app/Output_Parquet_Directory
      - ./Output_Directory:/app/Output_Directory
      - ./dbt_project:/app/dbt_project   # Mount dbt project for enhanced pipeline
      - ./scripts:/app/scripts # Mount enhanced scripts with shared modules
      # Enhanced pipeline specific directories
      - ./logs:/app/logs # Enhanced logging
      - ./backups:/app/backups # Cleaned up backups
      - ./health_datasets.csv:/app/health_datasets.csv:ro
      - ./eurostat_full_catalog.json:/app/eurostat_full_catalog.json:ro
    working_dir: /app
    command: ["tail", "-f", "/dev/null"]  # Keep container running for development
    networks:
      - eurostat_shared_network

  db:
    image: postgres:13-alpine  # Stable PostgreSQL version
    container_name: eurostat_db
    environment:
      # PostgreSQL configuration for enhanced pipeline
      - POSTGRES_DB=eurostat_data
      - POSTGRES_USER=eurostat_user
      - POSTGRES_PASSWORD=mysecretpassword
      # Performance optimizations for enhanced pipeline
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
      - POSTGRES_MAX_CONNECTIONS=200
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persist PostgreSQL data
      - ./sql_init:/docker-entrypoint-initdb.d # Initialization scripts
    ports:
      - "5432:5432" # Map to 5433 to avoid conflicts with local PostgreSQL
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eurostat_user -d eurostat_data"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - eurostat_shared_network

  web:
    build: .  # Uses the enhanced Dockerfile
    image: eurostat-web-interface # Same image as app
    container_name: eurostat_web_interface
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Database connection details (same as app)
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=eurostat_data
      - POSTGRES_USER=eurostat_user
      - POSTGRES_PASSWORD=mysecretpassword
      # Web interface specific environment
      - FLASK_APP=web_interface/app.py
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      # Enhanced pipeline configuration
      - USE_SHARED_MODULES=true
      - ENHANCED_PIPELINE_MODE=true
      - PYTHONPATH=/app/scripts:/app/scripts/shared:/app/web_interface # Ensure web_interface is in PYTHONPATH if needed
      - PYTHONUNBUFFERED=1 # For immediate log output
    volumes:
      # Mount directories (same as app)
      - ./Data_Directory:/app/Data_Directory
      - ./Output_Parquet_Directory:/app/Output_Parquet_Directory
      - ./Output_Directory:/app/Output_Directory
      - ./dbt_project:/app/dbt_project
      # - ./scripts:/app/scripts # Temporarily commented out for the web service to reduce reloads
      - ./web_interface:/app/web_interface # Mount web interface
      - ./logs:/app/logs
      - ./health_datasets.csv:/app/health_datasets.csv:ro
      - ./eurostat_full_catalog.json:/app/eurostat_full_catalog.json:ro
      - ./grouped_datasets_summary.csv:/app/grouped_datasets_summary.csv:ro # Added for web interface access
      # Mount Docker socket to allow docker commands
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /app
    # Run as root to access Docker socket, then switch to app user
    user: "0:0"
    command: ["sh", "-c", "python -m flask run --host=0.0.0.0 --port=5001"]
    ports:
      - "5001:5001" # Web interface port
    networks:
      - eurostat_shared_network
      - airflow
    # Health check for web interface
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5001/health"] # Updated to /health endpoint
      interval: 30s
      timeout: 10s
      retries: 3

  pgadmin:
    image: dpage/pgadmin4:latest # Database administration interface
    container_name: eurostat_pgadmin
    environment:
      # pgAdmin configuration for enhanced pipeline monitoring
      - PGADMIN_DEFAULT_EMAIL=wangziwei1998@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=eurostat
      - PGADMIN_CONFIG_SERVER_MODE=False # Simplified for development
    ports:
      - "5050:80" # pgAdmin web interface
    volumes:
      - pgadmin_data:/var/lib/pgadmin # Persist pgAdmin settings
    depends_on:
      - db
    networks:
      - eurostat_shared_network
    # Health check for pgAdmin
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data: # Persistent database storage
  pgadmin_data: # Persistent pgAdmin configuration

networks:
  eurostat_shared_network:
    name: eurostat_shared_network
    driver: bridge # This will create the network if it doesn't exist
  airflow:             # Add this
    name: airflow      # Use the same name as in docker-compose-airflow.yaml
    external: true     # Mark as external, assuming it's created by docker-compose-airflow.yaml 